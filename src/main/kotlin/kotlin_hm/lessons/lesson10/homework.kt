package kotlin_hm.kotlin_hm.lessons.lesson10

fun main() {

    // Создайте пустой неизменяемый словарь, где ключи и значения - целые числа.
    val d1 = mapOf<Int, Int>()

//Создайте словарь, инициализированный несколькими парами "ключ-значение", где ключи - float, а значения - double
    val d2 = mapOf<Float, Double>(123341f to 12.2, 12333f to 22.31)

//Создайте изменяемый словарь, где ключи - целые числа, а значения - строки.
    val d3 = mutableMapOf<Int, String>(1 to "one", 2 to "two")

//Имея изменяемый словарь, добавьте в него новые пары "ключ-значение".
    d3[3] = "three"
    println(d3)

//Используя словарь из предыдущего задания, извлеките значение, используя ключ.
// Попробуй получить значение с ключом, которого в словаре нет.
    val d4 = d3[3]
    println(d4)

    //Удалите определенный элемент из изменяемого словаря по его ключу.
    d3.remove(2)
    println(d3)

    //Создайте словарь (ключи Double, значения Int) и выведи в цикле результат деления ключа на значение.
    // Не забудь обработать деление на 0 (в этом случае выведи слово “бесконечность”)
    val d5 = mapOf<Double, Int>(9.0 to 3, 8.0 to 4, 7.0 to 0, 6.0 to 4)
    for ((key, value) in d5) {
        if (value != 0) {
            println(key / value)
        } else println("бесконечность")
    }

    //Измените значение для существующего ключа в изменяемом словаре.
    val d6 = mutableMapOf<Int, String>(1 to "один", 2 to "два")
    d6[2] = "три"
    println(d6)

    //Создайте два словаря и объедините их в третьем изменяемом словаре через циклы.
    val d7 = mapOf<Int, String>(1 to "один", 2 to "два")
    val d8 = mapOf<Int, String>(3 to "три", 4 to "четыре")
    val d9 = mutableMapOf<Int, String>()
    for ((key, value) in d7) {
        d9[key] = value
    }
    for ((key2, value2) in d8) {
        d9[key2] = value2
    }
    println(d9)

    //Создайте словарь, где ключами являются строки, а значениями - списки целых чисел.
    // Добавьте несколько элементов в этот словарь.
    val d10 = mutableMapOf<String, Int>("одиин" to 1, "дваа" to 2)
    d10["трии"] = 3
    d10["четырее"] = 4
    println(d10)

    //Создай словарь, в котором ключи - это целые числа, а значения - изменяемые множества строк.
    // Добавь данные в словарь. Получи значение по ключу (это должно быть множество строк) и добавь в это множество ещё строку.
    // Распечатай полученное множество.
    val d11 = mutableMapOf<Int, MutableSet<String>>()
    d11[1] = mutableSetOf("javascript", "java")
    d11[2] = mutableSetOf("kotlin", "swift")
    val d12 = d11[2]
    d12?.add("golang")
    println(d11)

    //Создай словарь, где ключами будут пары чисел.
    // Через перебор найди значение у которого пара будет содержать цифру 5 в качестве первого или второго значения.
    val d13 = mutableMapOf<Pair<Int, Int>, String>()
    d13[Pair(1, 2)] = "Один два"
    d13[Pair(3, 4)] = "Три четыре"
    d13[Pair(5, 6)] = "Пять шесть"
    for ((k, v) in d13) {
        if (k.first == 5 || k.second == 5) {
            println("$k содержит цифру 5")
        } else println("таких пар нет")
    }

    //Словарь библиотека: Ключи - автор книги, значения - список книг
    val d14 = mutableMapOf<String, MutableList<String>>()

    //Справочник растений: Ключи - типы растений (например, "Цветы", "Деревья"), значения - списки названий растений
    val d15 = mapOf<String, MutableList<String>>()

    //Четвертьфинала: Ключи - названия спортивных команд, значения - списки игроков каждой команды
    val d16 = mutableMapOf<String, MutableList<String>>()

    //Курс лечения: Ключи - даты, значения - список препаратов принимаемых в дату
    val d17 = mutableMapOf<String, MutableList<String>>()

    //Словарь путешественника: Ключи - страны, значения - словари из городов со списком интересных мест.
    val d18 = mutableMapOf<String, MutableList<String>>()
}






