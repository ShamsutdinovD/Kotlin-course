package kotlin_hm.kotlin_hm.lessons.lesson13

val map1 = mutableMapOf<String, Double>("Авторизация" to 3.0, "Меню" to 4.0, "Заказ" to 9.0, "Акция" to 5.0)

fun main() {

//1.Дан словарь с именем и временем выполнения каждого автоматизированного теста в секундах.
// Определите среднее время выполнения теста.
    val a1 = map1.values.average()
    println(a1)

//2.Имеется словарь с метаданными автоматизированных тестов, где ключи — это имена тестовых методов
// а значения - строка с метаданными. Выведите список всех тестовых методов.
    val a2 = map1.keys
    println(a2)

//3.В изменяемый словарь с данными о прохождении тестов добавьте новый тест и его результат.
    val a3 = map1 + ("Корзина" to 2.0)
    println(a3)

//4.Посчитайте количество успешных тестов в словаре с результатами
// (ключ - название, значение - результат из passed, failed, skipped).
    val map4 = mapOf("test1" to "passed", "test2" to "failed", "test3" to "skipped")
    val a4 = map4.count() { it.value == "passed" }
    println(a4)

//5.Удалите из изменяемого словаря с баг-трекингом запись о баге, который был исправлен
// (ключ - название, значение - статус исправления).
    val map5 = mutableMapOf<String, String>("Баг меню" to "in dev", "Баг с заказом" to "in test", "Баг корзины" to "ready")
    map5.remove("Баг корзины", "ready")
    println(map5)

//6.Для словаря с результатами тестирования веб-страниц (ключ — URL страницы, значение — статус ответа),
// выведите сообщение о странице и статусе её проверки.
    val map6 = mapOf("Страница1" to 200, "Страница2" to 403)
    map6.entries
    println(map6)

//7.Найдите в словаре с названием и временем ответа сервисов только те, время ответа которых превышает заданный порог.
    val map7 = mapOf("Страница1" to 0.1, "Страница2" to 0.3)
    println(map7.filter { it.value > 0.2 })

//8.В словаре хранятся результаты тестирования API (ключ — endpoint, значение — статус ответа в виде строки).
// Для указанного endpoint найдите статус ответа, если endpoint отсутствует, предположите, что он не был протестирован.
    val map8 = mapOf("endpoint1" to "200", "endpoint2" to "403")
    println(map8.getOrDefault("endpoint2", "Не протестировано"))

//9.Из словаря, содержащего конфигурации тестового окружения (ключ — название параметра конфигурации,
// значение - сама конфигурация), получите значение для "browserType". Ответ не может быть null.
    val map9 = mapOf("browserType" to "yandex", "deviceType" to "ios")
    println(map9.getValue("browserType"))

//10.Создайте копию неизменяемого словаря с данными о версиях тестируемого ПО, добавив новую версию.
    val map10 = mapOf("ПО1" to "1.1", "ПО2" to "1.2")

//11.Используя словарь с настройками тестирования для различных мобильных устройств (ключ — модель устройства, значение - строка с настройками), получите настройки для конкретной модели или верните настройки по умолчанию.
//12.Проверьте, содержит ли словарь с ошибками тестирования (ключ - код ошибки, значение - описание ошибки) определенный код ошибки.
//13.Дан неизменяемый словарь, где ключи — это идентификаторы тестовых сценариев в формате "TestID_Version", а значения — статусы выполнения этих тестов ("Passed", "Failed", "Skipped"). Отфильтруйте словарь, оставив только те сценарии, идентификаторы которых соответствуют определённой версии тестов, то-есть в ключе содержится требуемая версия.
//14.У вас есть словарь, где ключи — это названия функциональных модулей приложения, а значения — результаты их тестирования. Проверьте, есть ли модули с неудачным тестированием.
//15.Добавьте в изменяемый словарь с настройками тестовой среды настройки из другого словаря.
//16.Объедините два неизменяемых словаря с данными о багах.
//17.Очистите изменяемый словарь с временными данными о последнем прогоне автоматизированных тестов.
//18.Исключите из отчета по автоматизированному тестированию те случаи, где тесты были пропущены (имеют статус “skipped”). Ключи - название теста, значения - статус.
//19.Создайте копию словаря с конфигурациями тестирования удалив из него несколько конфигураций.
//20.Создайте отчет о тестировании, преобразовав словарь с результатами тестирования (ключ — идентификатор теста, значение — результат) в список строк формата "Test ID: результат".
//21.Преобразуйте изменяемый словарь с результатами последнего тестирования в неизменяемый для архивации.
//22.Преобразуйте словарь, содержащий числовой ID теста и данные о времени выполнения тестов, заменив идентификаторы тестов на их строковый аналог (например через toString()).
//23.Для словаря с оценками производительности различных версий приложения (ключи - строковая версия, значения - дробное число времени ответа сервера) увеличьте каждую оценку на 10%, чтобы учесть новые условия тестирования.
//24.Проверьте, пуст ли словарь с ошибками компиляции тестов.
//25.Убедитесь, что словарь с результатами нагрузочного тестирования не пуст.
//26.Проверьте, прошли ли успешно все автоматизированные тесты в словаре с результатами.
//27.Определите, содержит ли словарь с результатами тестирования хотя бы один тест с ошибкой.
//28.Отфильтруйте словарь с результатами тестирования сервисов, оставив только те тесты, которые не прошли успешно и содержат в названии “optional”.
}
