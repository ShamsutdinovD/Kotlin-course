package kotlin_hm.kotlin_hm.lessons.lesson09

fun main() {

// 1. Создайте массив из 5 целых чисел и инициализируйте его значениями от 1 до 5.

    val d1 = arrayOf(1, 2, 3, 4, 5)

// 2. Создайте пустой массив строк размером 10 элементов.

    val d2 = Array(10) { "" }

// 3. Создайте массив из 5 элементов типа Double и заполните его значениями, являющимися удвоенным индексом элемента.

    val d3 = Array(5) { index -> (index * 2) }

// 4. Создайте массив из 5 элементов типа Int.
// Используйте цикл, чтобы присвоить каждому элементу значение, равное его индексу, умноженному на 3.

    val d4 = IntArray(5)
    for (i in d4.indices) {
        d4[i] = i * 3
    }
    println(d4.joinToString(", "))

    // 5. Создайте массив из 3 nullable строк. Инициализируйте его одним null значением и двумя строками.

    val d5: Array<String?> = arrayOf("Строка", "Строчка", null)
    println(d5.joinToString(", "))

    // 6. Создайте массив целых чисел и скопируйте его в новый массив в цикле.

    val d6 = arrayOf(1, 2, 3, 4, 5, 6)
    val d7: Array<Int> = Array(6) { 0 }
    for (i in d6.indices) {
        d7[i] = d6[i]
    }
    println(d7.joinToString(", "))

// 7. Создайте два массива целых чисел одинаковой длины.
// Создайте третий массив, вычев значения одного из другого. Распечатайте полученные значения.

    val d8 = arrayOf(6, 7, 8, 9, 10)
    val d9 = arrayOf(1, 3, 5, 7, 9)
    val d10: Array<Int> = Array(5) { 0 }
    for (i in d10.indices) {
        d10[i] = d8[i] - d9[i]
    }
    println(d10.joinToString(", "))

    // 8. Создайте массив целых чисел. Найдите индекс элемента со значением 5.
    // Если значения 5 нет в массиве, печатаем -1. Реши задачу через цикл while.

    val d11: Array<Int> = arrayOf(1, 2, 3, 4, 6, 7)
    var i = 0
    var index = -1
    while (i < d11.size) {
        if (d11[i] == 5) index = i
        i++
    }
    println(index)

    // 9. Создайте массив целых чисел. Используйте цикл для перебора массива и вывода каждого элемента в консоль.
    // Напротив каждого элемента должно быть написано “чётное” или “нечётное”.

    val d12: Array<Int> = arrayOf(1, 2, 3, 4, 5, 6, 7)
    for (i in d12) {
        if (i % 2 == 0)
            println("$i - четное")
        else println("$i - нечетное")
    }

    // 10. Создай функцию, которая принимает массив строк и строку для поиска.

    val words = arrayOf("один", "два", "три")
    taskArray(words, "пять")


    // 1. Создайте пустой неизменяемый список целых чисел.

    val r1: List<Int> = listOf(1, 2, 3, 4)
    println(r1)

    // 2. Создайте неизменяемый список строк, содержащий три элемента (например, "Hello", "World", "Kotlin").

    val r2: List<String> = listOf("Hello", "World", "Kotlin")
    println(r2)

    // 3. Создайте изменяемый список целых чисел и инициализируйте его значениями от 1 до 5.

    val r3: MutableList<Int> = mutableListOf(1, 2, 3, 4, 5)
    println(r3)

    // 4. Имея изменяемый список целых чисел, добавьте в него новые элементы (например, 6, 7, 8).

    r3.add(6)
    r3.add(7)
    r3.add(8)
    println(r3)

    // 5. Имея изменяемый список строк, удалите из него определенный элемент (например, "World").

    val r5: MutableList<String> = mutableListOf("Hello", "World", "Kotlin")
    r5.remove("Kotlin")
    println(r5)

    // 6. Создайте список целых чисел и используйте цикл для вывода каждого элемента на экран.

    val r6: List<Int> = listOf(1, 2, 3)
    for (i in r6) {
        println(i)
    }

    // 7. Создайте список строк и получите из него второй элемент, используя его индекс.

    val r7: List<String> = listOf("Hello", "World", "Kotlin")
    println(r7[0])

    // 8. Имея изменяемый список чисел, измените значение элемента на определенной позиции
    // (например, замените элемент с индексом 2 на новое значение).

    val r8: MutableList<Int> = mutableListOf(1, 2, 3, 4, 5)
    r8[2] = 7
    println(r8)

    // 9. Создайте два списка строк и объедините их в один новый список,
    // содержащий элементы обоих списков. Реши задачу с помощью циклов.

    val r9: List<String> = listOf("Hello", "World", "Kotlin")
    val r10: List<String> = listOf("Один", "два", "три")
    val r11: MutableList<String> = mutableListOf()
    for (i in r9) {
        r11.add(i)
    }
    for (i in r10) {
        r11.add(i)
    }
    println(r11)

    // 10. Создайте список целых чисел и найдите в нем минимальный и максимальный элементы используя цикл.

    val r12: List<Int> = listOf(10, 4, 9, 44, 2, 7)
    var countermax = r12[0]
    var countermin = r12[0]
    for (i in r12) {
        if (i > countermax) {
            countermax = i
        }
        if (i < countermin) {
            countermin = i
        }
        println(countermax)
        println(countermin)
    }

    // 11. Имея список целых чисел, создайте новый список, содержащий только четные числа из исходного списка используя цикл.

    val r13: List<Int> = listOf(1, 2, 3, 4, 5, 6)
    val r14: MutableList<Int> = mutableListOf()
    for (i in r13) {
        if (i % 2 == 0) {
            r14.add(i)
        }
    }
    println(r14)

    // 1. Создайте пустое неизменяемое множество целых чисел.

    val w1: MutableSet<Int> = mutableSetOf()

    // 2. Создайте неизменяемое множество целых чисел, содержащее три различных элемента (например, 1, 2, 3).

    val w2: Set<Int> = setOf(1, 2, 3)

    // 3. Создайте изменяемое множество строк и инициализируйте
    // его несколькими значениями (например, "Kotlin", "Java", "Scala").

    val w3: MutableSet<String> = mutableSetOf("Kotlin", "Java", "Swift")

    // 4. Имея изменяемое множество строк, добавьте в него новые элементы (например, "Swift", "Go").

    w3.add("Golang")
    w3.add("Rust")
    println(w3)

    // 5. Имея изменяемое множество целых чисел, удалите из него определенный элемент (например, 2).

    val w5: MutableSet<Int> = mutableSetOf(1, 2, 3, 4)
    w5.remove(4)
    println(w5)

    // 6. Создайте множество целых чисел и используйте цикл для вывода каждого элемента на экран.

    val w6: Set<Int> = setOf(6, 7, 8)
    for (i in w6) {
        println(i)
    }

    // 7. Создай функцию, которая принимает множество строк (set) и строку и проверяет, есть ли в множестве указанная строка.
// Нужно вернуть булево значение true если строка есть. Реши задачу через цикл.

    val set = setOf<String>("один", "два", "три")
    taskSet(set, "пять")

    // 8. Создайте множество строк и конвертируйте его в изменяемый список строк с использованием цикла.

    val w7: Set<String> = setOf("kotlin", "code", "task")
    val w8: MutableList<String> = mutableListOf()
    for (i in w7) {
        w8.add(i)
    }
    println(w8)


}


//10. Создай функцию, которая принимает массив строк и строку для поиска.
// Функция должна находить в массиве элемент, в котором принятая строка является подстрокой (метод contains()).
// Распечатай найденный элемент.

fun taskArray(s1: Array<String>, s2: String) {
    for (i in s1) {
        if (i.contains(s2)) {
            println(i)
            return
        }
    }
    println("Совпадений нет")
}

// 7. Создай функцию, которая принимает множество строк (set) и строку и проверяет, есть ли в множестве указанная строка.
// Нужно вернуть булево значение true если строка есть. Реши задачу через цикл.

fun taskSet(a1: Set<String>, a2: String) {
    for (i in a1) {
        if (i.contains(a2)) {
            println("true")
            return
        }
    }
    println("Совпдаений нет")
}



